<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Actually, less is more!</description>
    <link>http://www.hifreud.com/</link>
    <atom:link href="http://www.hifreud.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 19 Jul 2017 17:37:30 +0800</pubDate>
    <lastBuildDate>Wed, 19 Jul 2017 17:37:30 +0800</lastBuildDate>
    <generator>Jekyll v2.5.0</generator>
    
      <item>
        <title>white-paper</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;第一章 问题和思路&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;1.1 数据采集、解析的开发难度问题&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;1.2 数据采集、解析等自编制脚本的管理问题&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#orientsoft&quot; id=&quot;markdown-toc-orientsoft&quot;&gt;1.3 Orientsoft软件组件状态管控的问题&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;第二章 最佳实践&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;2.1 数据采集、解析脚本&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;2.2 脚本管理&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;2.3 日志管控&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section&quot;&gt;第一章 问题和思路&lt;/h1&gt;

&lt;h2 id=&quot;section-1&quot;&gt;1.1 数据采集、解析的开发难度问题&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. 数据采集的难度&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  尽量减小对目标系统的干扰  
  平衡采集频率和吞吐量  
  稳定可靠的通信  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2. 解析的难度&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  对数据中的错误具有鲁棒性  
  对于复杂数据的处理能力  
  能够处理嵌套、混合类型的数据  
  对数据采集速度的变化具有缓冲、容纳能力  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;3. 解决思路&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  基于远程命令执行和网络文件映射的数据采集  
  在架构方面，将采集器进行抽象（主动、被动）  
  提供解析器模板、框架  
  提供多种通信信道（缓冲、分流、错误信道）  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-2&quot;&gt;1.2 数据采集、解析等自编制脚本的管理问题&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. 目前自编制脚本的问题&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  缺乏执行状态监控，可靠性难以保证  
  缺乏知识、代码积累  
  缺乏文档支持  
  缺乏配置、部署的管理  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2. 解决思路&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  提供状态监控  
  在状态监控的基础上，提供异常状态重启  
  强制要求文档的代码库  
  提供配置部署选项  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;orientsoft&quot;&gt;1.3 Orientsoft软件组件状态管控的问题&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. 目前Orientsoft软件组件状态的问题&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   缺乏状态监控  
   缺乏有效的日志  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2. 解决思路&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   利用conalog ActiveCollector采集组件状态（组件进程的存活、对系统资源的占用）  
   提供日志发布API，由conalog统一管理日志（Rotate、查询、导出）  
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;section-3&quot;&gt;第二章 最佳实践&lt;/h1&gt;

&lt;h2 id=&quot;section-4&quot;&gt;2.1 数据采集、解析脚本&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. 数据采集&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 对于数据采集脚本，推荐尽量以重复短暂执行模式为主，这类脚本用ActiveCollector来调用  
 获取到的数据不用开Redis通道，直接打印到STDOUT上，并且不用手工分行；如果有错误，直接输出到STDERR上。采集完成进程直接退出  
 需要长期实时采集的数据，推荐用SSHFS映射到本地后，用Filebeat采集到Redis通道上，在Conalog中添加AgentCollector，利用正则表达式过滤出需要的文件名/路径，并发送到指定通道  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;2. 解析脚本&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 解析脚本内部一般需要实现某种形式的Buffer，用来应对数据行的切断和数据输入速度的变化  
 同时解析脚本需要特别注意错误状态的恢复，如果陷入错误应该设法回到初始状态  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-5&quot;&gt;2.2 脚本管理&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. 知识积累&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 项目部署完成，及时上传新脚本到Git  
 添加Collector/Parser的时候尽量编写完善的备注，建议给出数据/结果样本  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-6&quot;&gt;2.3 日志管控&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. 日志集中&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 推荐使用Conalog提供的Restful API接口直接将日志推送到Conalog  
 编写统一的脚本进行资源状况采集  
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Fri, 23 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://www.hifreud.com/2017/06/23/white-paper/</link>
        <guid isPermaLink="true">http://www.hifreud.com/2017/06/23/white-paper/</guid>
        
        <category>白皮书</category>
        
        
        <category>document</category>
        
      </item>
    
      <item>
        <title>user-manual</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;第一章 概述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;第二章 部署与安装&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;2.1 环境要求&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;2.2 前台&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;2.3 后台&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;2.4 常见问题&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;2.5 访问网址&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#cert&quot; id=&quot;markdown-toc-cert&quot;&gt;第三章 cert&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;3.1 添加&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;3.2 修改&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-9&quot; id=&quot;markdown-toc-section-9&quot;&gt;3.3 删除&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-10&quot; id=&quot;markdown-toc-section-10&quot;&gt;3.4 查看密码&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#collector&quot; id=&quot;markdown-toc-collector&quot;&gt;第四章 collector&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-11&quot; id=&quot;markdown-toc-section-11&quot;&gt;4.1 添加&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-12&quot; id=&quot;markdown-toc-section-12&quot;&gt;4.2 修改&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-13&quot; id=&quot;markdown-toc-section-13&quot;&gt;4.3 删除&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#parser&quot; id=&quot;markdown-toc-parser&quot;&gt;第五章 parser&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-14&quot; id=&quot;markdown-toc-section-14&quot;&gt;5.1 添加&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-15&quot; id=&quot;markdown-toc-section-15&quot;&gt;5.2 修改&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-16&quot; id=&quot;markdown-toc-section-16&quot;&gt;5.3 删除&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#parser-1&quot; id=&quot;markdown-toc-parser-1&quot;&gt;5.4 Parser脚本&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#status&quot; id=&quot;markdown-toc-status&quot;&gt;第六章 status&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#active-passiveagent-status&quot; id=&quot;markdown-toc-active-passiveagent-status&quot;&gt;6.1 active ／passive／agent status&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#parser-status&quot; id=&quot;markdown-toc-parser-status&quot;&gt;6.2 parser status&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#history&quot; id=&quot;markdown-toc-history&quot;&gt;第七章 history&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-17&quot; id=&quot;markdown-toc-section-17&quot;&gt;7.1 查询&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-18&quot; id=&quot;markdown-toc-section-18&quot;&gt;第八章 常用流程&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-19&quot; id=&quot;markdown-toc-section-19&quot;&gt;8.1 数据采集流程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-20&quot; id=&quot;markdown-toc-section-20&quot;&gt;8.2 数据采集-解析流程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-21&quot; id=&quot;markdown-toc-section-21&quot;&gt;8.3 外部脚本监控流程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-22&quot; id=&quot;markdown-toc-section-22&quot;&gt;8.4 状态监控流程&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section&quot;&gt;第一章 概述&lt;/h1&gt;

&lt;p&gt;conalog是集数据采集，解析，状态管理，日志管理为一体的工具，可以有效的对自编制脚本进行管理和监控，
也可以监控orientsoft软件组件的状态,主要模块分为五部分：cert，collector，parser，status，history。&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;第二章 部署与安装&lt;/h1&gt;

&lt;h2 id=&quot;section-2&quot;&gt;2.1 环境要求&lt;/h2&gt;

&lt;p&gt;Linux版本：^3.0&lt;br /&gt;
Node版本：6.9 (LTS)&lt;br /&gt;
Mongo版本：^3.0&lt;br /&gt;
Redis版本：^3.0&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;2.2 前台&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;获取conglog-front代码；&lt;/li&gt;
  &lt;li&gt;修改/conalog-front/config 目录下的config.js 文件，将conalogHost的值改为虚拟机的IP地址；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;
conalogHost:’192.168.0.244’;
&lt;/code&gt;
&lt;code&gt;
//config.js配置文件
var config = {
  logLevel: &#39;info&#39;,
  conalogHost: &#39;192.168.0.244&#39;,
  conalogPort: 17527,
  conalogFrontPort: 7527,
  mongoUrl: &#39;mongodb://127.0.0.1:27017/conalog&#39;,
  redisUrl: &#39;redis://127.0.0.1:6379&#39;,
  activeCollectorPrefix: &#39;ac_&#39;,
  passiveCollectorPrefix: &#39;pc_&#39;,
  apiGatewayHost: &#39;apigateway&#39;,
  apiGatewayPort: 1234,
  apiGatewayToken: &#39;12345&#39;,
  apiGatewayUid: &#39;67890&#39;,
  apiGatewayType: &#39;user&#39;
}
module.exports = config;
&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;安装模块：npm i；&lt;/li&gt;
  &lt;li&gt;执行：gulp install；&lt;/li&gt;
  &lt;li&gt;编译：gulp go；&lt;/li&gt;
  &lt;li&gt;启动：npm start；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-4&quot;&gt;2.3 后台&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;获取conalog代码;&lt;/li&gt;
  &lt;li&gt;修改/ conalog /config 目录下的config.js 文件，将conalogHost，conalogFrontHost 以及nanomsgHost 的值改为虚拟机的IP地址；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;
conalogHost:’192.168.0.244’;
conalogFrontHost:’192.168.0.244’;
nanomsgHost:’192.168.0.244’;
&lt;/code&gt;
&lt;code&gt;
//config.js配置文件
var config = {
  logLevel: &#39;info&#39;,
  logLifespan: 604800000, // 7 days, in ms
  userAuthSwitch: false,
  conalogHost: &#39;192.168.0.244&#39;,
  conalogPort: 17527,
  conalogFrontHost: &#39;192.168.0.244&#39;,
  conalogFrontPort: 7527,
  mongoUrl: &#39;mongodb://127.0.0.1:27017/conalog&#39;,
  redisUrl: &#39;redis://127.0.0.1:6379&#39;,
  nanomsgProtocol: &#39;tcp://&#39;,
  nanomsgHost: &#39;192.168.0.244&#39;,
  nanomsgRequestPort: 17537,
  nanomsgStartPort: 17627,
  nanomsgEndPort: 17927,
  filebeatChannel: &#39;conalog-filebeat&#39;,
  parserPathPrefix: &#39;./parser/&#39;
}
module.exports = config;
&lt;/code&gt;
3. 安装模块：npm i；
4. 执行：gulp install；
5. 编译：gulp go；
6. 启动：node bin/www；&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;2.4 常见问题&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;每次修改代码后要运行 gulp go 使修改生效;&lt;/li&gt;
  &lt;li&gt;执行gulp install报错 “无法找到gulp” 时即执行 ‘npm install -g gulp’；&lt;/li&gt;
  &lt;li&gt;运行npm i命令后遇到缺少模块的问题时，npm install 该模块；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-6&quot;&gt;2.5 访问网址&lt;/h2&gt;

&lt;p&gt;conalogHost:conalogFrontPort&lt;br /&gt;
如：’192.168.0.244:7527’&lt;/p&gt;

&lt;p&gt;登录界面：（账号：admin 初始密码：admininitpass）
&lt;img src=&quot;/styles/images/logIn.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;登录成功：
&lt;img src=&quot;/styles/images/homePage.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;cert&quot;&gt;第三章 cert&lt;/h1&gt;

&lt;p&gt;cert功能：存储用于远程SSH登录的账号。Conalog可以通过ssh连接登陆虚拟机，随后可以执行Shell命令。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;3.1 添加&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;点击左上角添加按钮：
&lt;img src=&quot;/styles/images/addCert.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;弹出添加框，填写信息：&lt;br /&gt;
填写规范：  &lt;br /&gt;
Host: 192.168.0.244，（虚拟机IP地址）&lt;br /&gt;
Port：22，（端口号）&lt;br /&gt;
User：voyager，（虚拟机用户名）&lt;br /&gt;
Password：welcome1，（虚拟机用户名对应的密码）
&lt;img src=&quot;/styles/images/addCertModal.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;添加成功：
&lt;img src=&quot;/styles/images/addCertSuccess.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-8&quot;&gt;3.2 修改&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;点击edit按钮：
&lt;img src=&quot;/styles/images/editCert.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;弹出修改框，修改信息：
&lt;img src=&quot;/styles/images/editCertModal.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;保存即点击确认，不保存即点击取消；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-9&quot;&gt;3.3 删除&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;点击delete按钮： 
&lt;img src=&quot;/styles/images/deleteCert.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;弹出确定框，点击确认即删除，点击取消即取消删除：
&lt;img src=&quot;/styles/images/deleteCertModal.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-10&quot;&gt;3.4 查看密码&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;鼠标放在图标上，password即显示为明文密码，鼠标移开，密码即为隐藏密码；
&lt;img src=&quot;/styles/images/checkPassword.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;collector&quot;&gt;第四章 collector&lt;/h1&gt;

&lt;p&gt;collector作用：执行命令，采集数据。&lt;br /&gt;
分为active、passive和agent collector三种类型：  
1. active collector是根据设定的时间间隔/每天固定时间点/单次执行命令，一般用于编写脚本主动读取日志；  
2. passive collector是执行一次命令并一直保持执行状态，通常用于tail -F等长期执行的任务；  
3. agent collector是从Filebeat统一的日志更新通道接收数据，根据文件通配符规则，把同类型的日志，分发到指定的通道中。  &lt;/p&gt;

&lt;h2 id=&quot;section-11&quot;&gt;4.1 添加&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;active collector：&lt;br /&gt;
填写规范：&lt;br /&gt;
Name: 无要求（&lt;strong&gt;输出数据的redis通道名默认为 ac_name&lt;/strong&gt;）;&lt;br /&gt;
Type:&lt;br /&gt;
       interval : 每间隔一段时间执行一次命令；&lt;br /&gt;
       time ：每天定点执行命令；&lt;br /&gt;
       oneshot：只执行一次；&lt;br /&gt;
Trigger: 对应type类型设置时间；&lt;br /&gt;
Command: 执行命令；&lt;br /&gt;
Parameter: 参数；&lt;br /&gt;
Host: 虚拟机IP；&lt;br /&gt;
Encoding: 根据电脑系统选择对应的编码；&lt;br /&gt;
Channel: redis/nanomsg;&lt;br /&gt;
Description: collector usage &amp;amp; source &amp;amp; description；
&lt;img src=&quot;/styles/images/addActiveCollector.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;passive collector：&lt;br /&gt;
填写规范：&lt;br /&gt;
Name: 无要求（&lt;strong&gt;输出数据的redis通道名默认为 pc_name&lt;/strong&gt;);&lt;br /&gt;
Type:  
       LongScript: 执行用户指定的命令；&lt;br /&gt;
       File Tail: 执行 tail -F 命令（快捷方式）；  
Command: 执行命令；  
Parameter: 参数；&lt;br /&gt;
Host: 虚拟机IP；&lt;br /&gt;
Encoding: 根据电脑系统选择对应的编码；&lt;br /&gt;
Channel: redis/nanomsg;&lt;br /&gt;
Description: collector usage&amp;amp;source&amp;amp;description；
&lt;img src=&quot;/styles/images/addPassiveCollector.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;agent collector&lt;br /&gt;
 3.1 点击添加按钮：
&lt;img src=&quot;/styles/images/addAgentCollector.png&quot; alt=&quot;&quot; /&gt;
 3.2 弹出添加框，填写信息：&lt;br /&gt;
   填写规范&lt;br /&gt;
   Name: 无要求 （&lt;strong&gt;输出数据的redis通道名默认为 agt_name&lt;/strong&gt;）；&lt;br /&gt;
   Parameter: 文件名的正则表达式；  
   Encoding: 根据电脑系统选择对应的编码；&lt;br /&gt;
   Channel: redis/nanomsg;&lt;br /&gt;
   Description: collector usage &amp;amp; source &amp;amp; description；
&lt;img src=&quot;/styles/images/addAgentCollectorContent.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-12&quot;&gt;4.2 修改&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;active collector：&lt;br /&gt;
勾选要修改的项，再点击edit按钮，在页面上方即可出现对应的信息，修改之后保存点击save按钮，不保存点击clear按钮；
&lt;img src=&quot;/styles/images/editActiveCollector.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/styles/images/editActiveCollectorContent.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;passive collector：&lt;br /&gt;
勾选要修改的项，再点击edit按钮，在页面上方即可出现对应的信息，修改之后保存点击save按钮，不保存点击clear按钮；
&lt;img src=&quot;/styles/images/editPassiveCollector.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/styles/images/editPassiveCollectorContent.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;agent collector:&lt;br /&gt;
点击edit按钮，即会弹出修改框，修改之后保存点击确定按钮，不保存点击取消按钮；
&lt;img src=&quot;/styles/images/editAgentCollector.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/styles/images/editAgentCollectorContent.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-13&quot;&gt;4.3 删除&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;active collector：&lt;br /&gt;
勾选要删除的项，再点击delete按钮，弹出确定框，删除点击确定，不删除点击取消；
&lt;img src=&quot;/styles/images/editActiveCollector.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/styles/images/deleteActiveCollector.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;passive collector：&lt;br /&gt;
勾选要删除的项，再点击delete按钮，弹出确定框，删除点击确定，不删除点击取消；
&lt;img src=&quot;/styles/images/editPassiveCollector.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/styles/images/deletePassiveCollector.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;agent collector:&lt;br /&gt;
点击delete按钮，弹出确定框，删除点击确定，不删除点击取消；
&lt;img src=&quot;/styles/images/deleteAgentCollector.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/styles/images/deleteAgentCollectorModal.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;parser&quot;&gt;第五章 parser&lt;/h1&gt;

&lt;p&gt;parser的功能：parser通过调用脚本把文件中的文本数据转换成结构数据，同一个parser可以同时启动多个实例。&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;5.1 添加&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;点击左上角添加按钮：
&lt;img src=&quot;/styles/images/addParser.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;弹出添加框，填写内容，所有选项均为必填：&lt;br /&gt;
填写规范：&lt;br /&gt;
Name：esb   (无要求)；&lt;br /&gt;
Path：esb.js   (parser脚本的路径，可以使用相对路径，默认当前目录为CONALOG_PATH/parser/)；  
Parameter：esb=1   (脚本对应的参数)；&lt;br /&gt;
InputChannel：ac_mobile (输入数据通道名)；&lt;br /&gt;
OutputChannel：esb (输出数据通道名，&lt;strong&gt;Conalog会自动给输出通道名加前缀p_&lt;/strong&gt;)；&lt;br /&gt;
InputType：RedisChannel   (RedisChannel/NanomsgQueue);  
OutputType：RedisChannel   (RedisChannel/NanomsgQueue);&lt;br /&gt;
Remark：input:… output:{…}   (parser脚本作用描述，输入输出数据格式等);
&lt;img src=&quot;/styles/images/addParserContent.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;添加成功：
&lt;img src=&quot;/styles/images/addParserSuccess.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-15&quot;&gt;5.2 修改&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;点击edit按钮：
&lt;img src=&quot;/styles/images/editParser.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;弹出修改框，修改信息：
&lt;img src=&quot;/styles/images/editParserModal.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;保存即点击确认，不保存即点击取消；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-16&quot;&gt;5.3 删除&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;点击delete按钮： 
&lt;img src=&quot;/styles/images/deleteParser.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;弹出确定框，点击确认即删除，点击取消即取消删除：
&lt;img src=&quot;/styles/images/deleteParserModal.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;parser-1&quot;&gt;5.4 Parser脚本&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Parser脚本用ES2015编写，默认存放在CONALOG_PATH/parser-src目录下；&lt;/li&gt;
  &lt;li&gt;脚本编写完成后，在conalog主目录执行gulp compile-parser即可将ES2015的Parser编译成ES5代码，存放在CONALOG_PATH/parser目录下；&lt;/li&gt;
  &lt;li&gt;请参考&lt;a href=&quot;https://github.com/Orientsoft/conalog/wiki/ParserDev&quot;&gt;Conalog Parser开发指南&lt;/a&gt;进行Parser的开发；&lt;/li&gt;
  &lt;li&gt;可以用Git为每个部署项目开新分支，并提交新开发的parser到github conalog项目，分支准备好后请在conalog项目提交Pull Request。请咨询&lt;a href=&quot;https://github.com/xiedidan&quot;&gt;项目管理员&lt;/a&gt;获取写入权限。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;status&quot;&gt;第六章 status&lt;/h1&gt;

&lt;p&gt;status作用：展示active collector，passive collector，agent collector以及parser执行的状态和结果，可以控制启停。&lt;/p&gt;

&lt;h2 id=&quot;active-passiveagent-status&quot;&gt;6.1 active ／passive／agent status&lt;/h2&gt;

&lt;p&gt;6.1.1 控制
点击operation下的切换按钮，即可来回开启和关闭；&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;关闭状态：
&lt;img src=&quot;/styles/images/stop.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;开启状态：
&lt;img src=&quot;/styles/images/start.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;6.1.2 查看
1. 执行成功：&lt;br /&gt;
Exec Count: 执行次数；&lt;br /&gt;
Last Activity Time: 最后一次执行时间；&lt;br /&gt;
Last Activity Message: 最后一次执行信息；&lt;br /&gt;
     stdout: 执行过程中输出的正确数据；&lt;br /&gt;
     stderr:执行过程中发现的错误；&lt;br /&gt;
&lt;img src=&quot;/styles/images/statusMessage.png&quot; alt=&quot;&quot; /&gt;
2. 执行失败：&lt;br /&gt;
Exec Count: 0；&lt;br /&gt;
Last Activity Time: N/A；&lt;br /&gt;
Last Activity Message: N/A / Pending；&lt;br /&gt;
&lt;img src=&quot;/styles/images/start.png&quot; alt=&quot;&quot; /&gt;
3. 查看redis通道数据:&lt;br /&gt;
打开终端；&lt;br /&gt;
输入 redis-cli；&lt;br /&gt;
subscribe redis channel (active collector即为 ac_[collector name], passive collector 即为 pc _[collector name]);&lt;/p&gt;

&lt;h2 id=&quot;parser-status&quot;&gt;6.2 parser status&lt;/h2&gt;

&lt;p&gt;6.2.1 启动parser实例
1. 点击start按钮：
&lt;img src=&quot;/styles/images/startParserInstance.png&quot; alt=&quot;&quot; /&gt;
2. 弹出确认框,点击确定即生成实例，点击取消即取消生成：
&lt;img src=&quot;/styles/images/startParserInstanceModal.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.2.2 查看parser实例
1. 查看实例总数：
&lt;img src=&quot;/styles/images/instanceNum.png&quot; alt=&quot;&quot; /&gt;
2. 查看实例内容，点击下拉按钮,即可显示所有实例：
&lt;img src=&quot;/styles/images/showParserInstance.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/styles/images/parserInstanceDetail.png&quot; alt=&quot;&quot; /&gt;
3. 查看redis通道数据:&lt;br /&gt;
打开终端；&lt;br /&gt;
输入 redis-cli；&lt;br /&gt;
subscribe redis channel (parser outputChannel);&lt;/p&gt;

&lt;p&gt;6.2.3 删除parser实例
1. 点击stop按钮；
&lt;img src=&quot;/styles/images/deleteParserInstance.png&quot; alt=&quot;&quot; /&gt;
2. 弹出确认框,点击确认即删除，点击取消即取消删除：
&lt;img src=&quot;/styles/images/stopParserInstanceModal.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;history&quot;&gt;第七章 history&lt;/h1&gt;

&lt;p&gt;history作用：保存日志，默认数据保存时限为7天。&lt;/p&gt;

&lt;h2 id=&quot;section-17&quot;&gt;7.1 查询&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;根据EventID进行查询：
&lt;img src=&quot;/styles/images/history.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;点击下拉按钮，查看具体内容：
&lt;img src=&quot;/styles/images/showHistory.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/styles/images/historyContent.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section-18&quot;&gt;第八章 常用流程&lt;/h1&gt;

&lt;h2 id=&quot;section-19&quot;&gt;8.1 数据采集流程&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;添加cert；&lt;/li&gt;
  &lt;li&gt;添加 collector；&lt;/li&gt;
  &lt;li&gt;status里启动并查看结果；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-20&quot;&gt;8.2 数据采集-解析流程&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;添加cert；&lt;/li&gt;
  &lt;li&gt;添加collector, 根据需求选择不同的collector类型；&lt;br /&gt;
Active collector 输出数据的redis通道名为 ac_[collector name]； &lt;br /&gt;
Passive collector 输出数据的redis通道名为 pc_[collector name]； &lt;br /&gt;
Agent collector 输出数据的redis通道名为 agt_[collector name]；&lt;/li&gt;
  &lt;li&gt;添加parser，InputChannel为collector数据输出通道名，collector采集的数据则可以进入Parser；&lt;/li&gt;
  &lt;li&gt;status里启动并查看结果；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-21&quot;&gt;8.3 外部脚本监控流程&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;添加cert；&lt;/li&gt;
  &lt;li&gt;添加 Active collector，定时启动外部脚本；&lt;/li&gt;
  &lt;li&gt;status里启动并查看结果；&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-22&quot;&gt;8.4 状态监控流程&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;采集Orientsoft内部软件的日志;&lt;/li&gt;
  &lt;li&gt;history进行展示；&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 20 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://www.hifreud.com/2017/06/20/user-manual/</link>
        <guid isPermaLink="true">http://www.hifreud.com/2017/06/20/user-manual/</guid>
        
        <category>教程</category>
        
        
        <category>document</category>
        
      </item>
    
  </channel>
</rss>
